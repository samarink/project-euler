# Each new term in the Fibonacci sequence
# is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence
# whose values do not exceed four million,
# find the sum of the even-valued terms.

# Kinda modular kinda overengineered
def fibs_up_to_num(limit)
  return [] if limit == 0
  return [1] if limit == 1

  sequence = [1, 2]
  next_term = sequence[-1] + sequence[-2]

  while next_term < limit
    sequence << next_term
    next_term = sequence[-1] + sequence[-2]
  end

  sequence
end

def select_even_nums(arr)
  arr.select(&:even?)
end

def sum_arr(arr)
  arr.reduce(:+)
end

# Taking it easy
def even_fibs(limit)
  a, b = 1, 2
  sum = b

  while(b <= limit)
    a, b = b, a + b
    sum += b if b.even?
  end

  sum
end


# Test
fibs_up_to_4m = fibs_up_to_num(4_000_000)
even_fibs_up_to_4m = select_even_nums(fibs_up_to_4m)

puts sum_arr(even_fibs_up_to_4m) # => 4613732
